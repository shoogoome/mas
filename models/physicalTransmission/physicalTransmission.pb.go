// Code generated by protoc-gen-go. DO NOT EDIT.
// source: physicalTransmission.proto

package physicalTransmission

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 分片或分块元数据信息
type ShardChuckMetaData struct {
	// hash
	FileHash string `protobuf:"bytes,1,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	// 序号
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// 数据块类型
	Shard                bool     `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardChuckMetaData) Reset()         { *m = ShardChuckMetaData{} }
func (m *ShardChuckMetaData) String() string { return proto.CompactTextString(m) }
func (*ShardChuckMetaData) ProtoMessage()    {}
func (*ShardChuckMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7899ab23fa6dc11f, []int{0}
}

func (m *ShardChuckMetaData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardChuckMetaData.Unmarshal(m, b)
}
func (m *ShardChuckMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardChuckMetaData.Marshal(b, m, deterministic)
}
func (m *ShardChuckMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardChuckMetaData.Merge(m, src)
}
func (m *ShardChuckMetaData) XXX_Size() int {
	return xxx_messageInfo_ShardChuckMetaData.Size(m)
}
func (m *ShardChuckMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardChuckMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_ShardChuckMetaData proto.InternalMessageInfo

func (m *ShardChuckMetaData) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ShardChuckMetaData) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ShardChuckMetaData) GetShard() bool {
	if m != nil {
		return m.Shard
	}
	return false
}

// 分片或分块数据信息
type ShardChuckDataInfo struct {
	// 文件分片数据
	FileData []byte `protobuf:"bytes,4,opt,name=fileData,proto3" json:"fileData,omitempty"`
	// 文件分片元数据
	Metadata             *ShardChuckMetaData `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ShardChuckDataInfo) Reset()         { *m = ShardChuckDataInfo{} }
func (m *ShardChuckDataInfo) String() string { return proto.CompactTextString(m) }
func (*ShardChuckDataInfo) ProtoMessage()    {}
func (*ShardChuckDataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7899ab23fa6dc11f, []int{1}
}

func (m *ShardChuckDataInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardChuckDataInfo.Unmarshal(m, b)
}
func (m *ShardChuckDataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardChuckDataInfo.Marshal(b, m, deterministic)
}
func (m *ShardChuckDataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardChuckDataInfo.Merge(m, src)
}
func (m *ShardChuckDataInfo) XXX_Size() int {
	return xxx_messageInfo_ShardChuckDataInfo.Size(m)
}
func (m *ShardChuckDataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardChuckDataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShardChuckDataInfo proto.InternalMessageInfo

func (m *ShardChuckDataInfo) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *ShardChuckDataInfo) GetMetadata() *ShardChuckMetaData {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardChuckMetaData)(nil), "physicalTransmission.ShardChuckMetaData")
	proto.RegisterType((*ShardChuckDataInfo)(nil), "physicalTransmission.ShardChuckDataInfo")
}

func init() { proto.RegisterFile("physicalTransmission.proto", fileDescriptor_7899ab23fa6dc11f) }

var fileDescriptor_7899ab23fa6dc11f = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x4e, 0xb4, 0x40,
	0x14, 0x85, 0x77, 0x7e, 0xfe, 0xdd, 0xe0, 0x5d, 0x0b, 0x73, 0x43, 0x41, 0xa8, 0x08, 0xd5, 0x54,
	0x14, 0xeb, 0x1b, 0x28, 0x85, 0x16, 0x26, 0x06, 0xb5, 0x33, 0xc6, 0x2b, 0xcc, 0xca, 0x44, 0x60,
	0x26, 0xcc, 0xa8, 0xeb, 0xeb, 0xf8, 0xa4, 0x66, 0xd8, 0x40, 0x36, 0x91, 0x44, 0x0a, 0x2d, 0xcf,
	0x9c, 0x9c, 0xef, 0x9c, 0x9b, 0x0c, 0x44, 0xba, 0xfa, 0x30, 0xb2, 0xa0, 0xfa, 0xb6, 0xa3, 0xd6,
	0x34, 0xd2, 0x18, 0xa9, 0xda, 0x54, 0x77, 0xca, 0x2a, 0x0c, 0xa6, 0xbc, 0xe4, 0x1e, 0xf0, 0xa6,
	0xa2, 0xae, 0x3c, 0xaf, 0x5e, 0x8b, 0x97, 0x2b, 0x61, 0x29, 0x23, 0x4b, 0x18, 0x81, 0xbf, 0x95,
	0xb5, 0xb8, 0x20, 0x53, 0x85, 0x2c, 0x66, 0xfc, 0x28, 0x1f, 0x35, 0x06, 0xb0, 0x94, 0x6d, 0x29,
	0x76, 0xe1, 0xbf, 0x98, 0x71, 0x2f, 0xdf, 0x0b, 0xf7, 0x6a, 0x1c, 0x27, 0xf4, 0x62, 0xc6, 0xfd,
	0x7c, 0x2f, 0x92, 0xb7, 0x43, 0xba, 0x23, 0x5f, 0xb6, 0x5b, 0x35, 0xd0, 0x9d, 0x0e, 0xff, 0xc7,
	0x8c, 0x1f, 0xe7, 0xa3, 0xc6, 0x0c, 0xfc, 0x46, 0x58, 0x2a, 0x9d, 0xb7, 0x8c, 0x19, 0x5f, 0x6f,
	0x78, 0x3a, 0x79, 0xd4, 0xf7, 0xd5, 0xf9, 0x98, 0xdc, 0x7c, 0x7a, 0x10, 0x5c, 0x4f, 0xa4, 0xf0,
	0x01, 0x56, 0x77, 0xba, 0x56, 0x54, 0xe2, 0x8f, 0xd8, 0x61, 0x6e, 0x34, 0x7b, 0x40, 0xb2, 0xc0,
	0x47, 0xf0, 0x33, 0xf5, 0xde, 0xce, 0x6b, 0x18, 0x72, 0xd1, 0xec, 0x2d, 0xc9, 0x02, 0x0b, 0x58,
	0x67, 0xa2, 0x16, 0x56, 0xf4, 0xee, 0x6f, 0x96, 0x1c, 0x9c, 0x31, 0x96, 0xf4, 0xc6, 0xdf, 0x94,
	0x9c, 0x21, 0x9c, 0x48, 0x95, 0x3e, 0x77, 0xba, 0x48, 0xc5, 0x8e, 0x1a, 0x5d, 0x0b, 0xf3, 0xb4,
	0xea, 0xff, 0xea, 0xe9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xf2, 0x35, 0xa6, 0xc9, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhysicalTransmissionClient is the client API for PhysicalTransmission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhysicalTransmissionClient interface {
	// 完整上传
	Upload(ctx context.Context, in *ShardChuckDataInfo, opts ...grpc.CallOption) (*ShardChuckMetaData, error)
	// 文件下载
	Download(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckDataInfo, error)
	// 删除指定文件数据分片（即经过加密分片的数据）
	DeleteShard(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckMetaData, error)
	// 删除指定文件数据分块（即未整合数据）
	DeleteChuck(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckMetaData, error)
}

type physicalTransmissionClient struct {
	cc *grpc.ClientConn
}

func NewPhysicalTransmissionClient(cc *grpc.ClientConn) PhysicalTransmissionClient {
	return &physicalTransmissionClient{cc}
}

func (c *physicalTransmissionClient) Upload(ctx context.Context, in *ShardChuckDataInfo, opts ...grpc.CallOption) (*ShardChuckMetaData, error) {
	out := new(ShardChuckMetaData)
	err := c.cc.Invoke(ctx, "/physicalTransmission.PhysicalTransmission/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTransmissionClient) Download(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckDataInfo, error) {
	out := new(ShardChuckDataInfo)
	err := c.cc.Invoke(ctx, "/physicalTransmission.PhysicalTransmission/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTransmissionClient) DeleteShard(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckMetaData, error) {
	out := new(ShardChuckMetaData)
	err := c.cc.Invoke(ctx, "/physicalTransmission.PhysicalTransmission/DeleteShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTransmissionClient) DeleteChuck(ctx context.Context, in *ShardChuckMetaData, opts ...grpc.CallOption) (*ShardChuckMetaData, error) {
	out := new(ShardChuckMetaData)
	err := c.cc.Invoke(ctx, "/physicalTransmission.PhysicalTransmission/DeleteChuck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhysicalTransmissionServer is the server API for PhysicalTransmission service.
type PhysicalTransmissionServer interface {
	// 完整上传
	Upload(context.Context, *ShardChuckDataInfo) (*ShardChuckMetaData, error)
	// 文件下载
	Download(context.Context, *ShardChuckMetaData) (*ShardChuckDataInfo, error)
	// 删除指定文件数据分片（即经过加密分片的数据）
	DeleteShard(context.Context, *ShardChuckMetaData) (*ShardChuckMetaData, error)
	// 删除指定文件数据分块（即未整合数据）
	DeleteChuck(context.Context, *ShardChuckMetaData) (*ShardChuckMetaData, error)
}

// UnimplementedPhysicalTransmissionServer can be embedded to have forward compatible implementations.
type UnimplementedPhysicalTransmissionServer struct {
}

func (*UnimplementedPhysicalTransmissionServer) Upload(ctx context.Context, req *ShardChuckDataInfo) (*ShardChuckMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedPhysicalTransmissionServer) Download(ctx context.Context, req *ShardChuckMetaData) (*ShardChuckDataInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedPhysicalTransmissionServer) DeleteShard(ctx context.Context, req *ShardChuckMetaData) (*ShardChuckMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (*UnimplementedPhysicalTransmissionServer) DeleteChuck(ctx context.Context, req *ShardChuckMetaData) (*ShardChuckMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChuck not implemented")
}

func RegisterPhysicalTransmissionServer(s *grpc.Server, srv PhysicalTransmissionServer) {
	s.RegisterService(&_PhysicalTransmission_serviceDesc, srv)
}

func _PhysicalTransmission_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardChuckDataInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTransmissionServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/physicalTransmission.PhysicalTransmission/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTransmissionServer).Upload(ctx, req.(*ShardChuckDataInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTransmission_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardChuckMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTransmissionServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/physicalTransmission.PhysicalTransmission/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTransmissionServer).Download(ctx, req.(*ShardChuckMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTransmission_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardChuckMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTransmissionServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/physicalTransmission.PhysicalTransmission/DeleteShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTransmissionServer).DeleteShard(ctx, req.(*ShardChuckMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTransmission_DeleteChuck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardChuckMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTransmissionServer).DeleteChuck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/physicalTransmission.PhysicalTransmission/DeleteChuck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTransmissionServer).DeleteChuck(ctx, req.(*ShardChuckMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhysicalTransmission_serviceDesc = grpc.ServiceDesc{
	ServiceName: "physicalTransmission.PhysicalTransmission",
	HandlerType: (*PhysicalTransmissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _PhysicalTransmission_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _PhysicalTransmission_Download_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _PhysicalTransmission_DeleteShard_Handler,
		},
		{
			MethodName: "DeleteChuck",
			Handler:    _PhysicalTransmission_DeleteChuck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "physicalTransmission.proto",
}
